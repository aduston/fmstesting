application.onAppStart = function() {
    /**
     * Map of group to file name
     */
    application.startTimes = {};
};

application.onConnect = function(client) {
    client.startMatch = function(groupName, matchNo) {
        
    };
    application.acceptConnection(client);
};

application.onPublish = function(client, stream) {
    trace("Handing publish and record request for source stream: " + 
          stream.name);
    var nc = new NetConnection();
    nc.onStatus = function(info) {
        netConnectionStatusHandler(nc, info, stream);
    };
    nc.connect("rtmfp://p2p.rtmfp.net/DEV_KEY_HERE/");
};

function netConnectionStatusHandler(nc, info, stream) {
    trace("Multicast NetConnection Status: " + info.code);
    switch (info.code) {
    case "NetConnection.Connect.Success":
        initMulticastNetStream(nc, info, stream);
        break;
    case "NetConnection.Connect.Failed":
    case "NetConnection.Connect.Rejected":
    case "NetConnection.Connect.AppShutdown":
        trace("Multicast publish error: " + info.code + 
              ", description: " + info.description);
        break;
    case "NetConnection.Connect.Closed":
        trace("Multicast publish closed: " + info.code + 
              ", description: " + info.description);
        break;
    default:
        // ignore
    }
}

function initMulticastNetStream(nc, info, stream) {
    var groupSpec = new GroupSpecifier("newgroup");
    groupSpec.serverChannelEnabled = true;
    groupSpec.multicastEnabled = true;
    var ns = new NetStream(
        nc, groupSpec.groupspecWithAuthorizations());
    ns.onStatus = function(info) {
        netStreamStatusHandler(info, stream, ns);
    };
}

function netStreamStatusHandler(info, stream, ns) {
    trace("NetStream status: " + info.code + " and stream name is " + stream.name);
    // TODO: maybe, uh, do different things here depending on value? who knows!
    if (info.code == "NetStream.Connect.Success") {
        trace('attaching and publishing stream.');
        if (!ns.attach(stream)) {
            trace("Failed to attach to multicast");
            return;
        }
        ns.publish('newuser');
    }
}

/**
 * Parses the supplied query string, and if valid, returns an Object populated
 * with the name-value pairs contained in the query string. The simple processing
 * here does not preserve multiple name-value pairings having the same name; the 
 * last value seen wins. Parameters with no value are mapped to "" (empty String)
 * in the returned Object.
 *
 * @param queryString - A query string portion of a URI, not including the leading
 *                     '?' character.
 * @return An Object containing a key-value mapping for each name-value parameter
 *         defined in the query string; Object is empty if the query string is 
 *         invalid.
 */
function parseQueryString(queryString) {
    var result = {};
    var decoded = "";

    try {
        decoded = decodeURIComponent(queryString);
    }
    catch (e) { 
        return result;
    }

    if (decoded.length) {
        var params = decoded.split('&');
        for (var i in params) {
            var pair = params[i];
	    var sepIndex = pair.indexOf('=');
            if (sepIndex != -1) {
                var name = pair.substr(0, sepIndex);
                result[name] = pair.substr(sepIndex + 1);
            }
            else
                result[pair] = "";
        }
    }

    return result;
}
